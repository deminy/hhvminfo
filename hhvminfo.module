<?php

/**
 * @file
 * Display phpinfo for HHVM HipHop Virtual Machine.
 */

/**
 * Implements hook_theme().
 */
function hhvminfo_theme() {
  return array(
    'hhvminfo_phpinfo' => array(
      'template'  => 'hhvminfo',
      'variables' => array('params' => array()),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 *
 * @see system_menu()
 */
function hhvminfo_menu_alter(array &$items) {
  $path = 'admin/reports/status/php';
  if (array_key_exists($path, $items)) {
    $items[$path]['page callback'] = '_hhvminfo_phpinfo';
    unset($items[$path]['file']);
  }
}

/**
 * Display phpinfo for HHVM, or use phpinfo() directly if not under HHVM.
 */
function _hhvminfo_phpinfo() {
  if (php_sapi_name() == 'srv') {
    $params = array_intersect_key(
      drupal_get_query_parameters(),
      array_fill_keys(
        array('INI', 'EXTENSIONS', 'FUNCTIONS', 'CONSTANTS'),
        NULL
      )
    );
    print theme('hhvminfo_phpinfo', array('params' => $params));

    drupal_exit();
  }
  else {
    module_load_include('inc', 'system', 'system.admin');
    system_php();
  }
}

/**
 * Print phpinfo data into in an HTML table.
 *
 * @param array $array
 *   phpinfo data to be printed out into an HTML table.
 * @param array $headers
 *   Table headers.
 * @param bool $formatkeys
 *   Format keys or not.
 * @param bool $formatnumeric
 *   Formatting number values or not.
 */
function _hhvminfo_print_table(
  array $array,
  array $headers = array(),
  $formatkeys = FALSE,
  $formatnumeric = FALSE) {
  if (empty($array)) {
    return;
  }

  echo '<table border="0" cellpadding="3">';

  if (!empty($headers)) {
    echo '<tr class="h">';
    foreach ($headers as $value) {
      echo '<th>', $value, '</th>';
    }
    echo '</tr>';
  }

  foreach ($array as $key => $value) {
    echo '<tr>';
    if (!is_numeric($key) || !$formatkeys) {
      echo
        '<td class="e">',
        ($formatkeys ? ucwords(str_replace('_', ' ', $key)) : $key),
        '</td>';
    }
    if (is_array($value)) {
      foreach ($value as $column) {
        echo
          '<td class="v">',
          _hhvminfo_format_special($column, $formatnumeric),
          '</td>';
      }
    }
    else {
      echo
        '<td class="v">',
        _hhvminfo_format_special($value, $formatnumeric),
        '</td>';
    }
    echo '</tr>';
  }

  echo '</table>';
}

/**
 * Format different types of values for displaying in HTML.
 *
 * @param mixed $value
 *   A phpinfo value to be formatted for HTML output.
 * @param bool $formatnumeric
 *   Formatting number values or not.
 *
 * @return string
 *   Returns formatted phpinfo value as a string.
 */
function _hhvminfo_format_special($value, $formatnumeric = FALSE) {
  if (is_array($value)) {
    $value = '<i>array</i>';
  }
  elseif (is_object($value)) {
    $value = '<i>object</i>';
  }
  elseif ($value === TRUE) {
    $value = '<i>true</i>';
  }
  elseif ($value === FALSE) {
    $value = '<i>false</i>';
  }
  elseif ($value === NULL) {
    $value = '<i>null</i>';
  }
  elseif ($value === 0 || $value === 0.0 || $value === '0') {
    $value = '0';
  }
  elseif (empty($value)) {
    $value = '<i>no value</i>';
  }
  elseif (is_string($value) && strlen($value) > 50) {
    $value = implode('&#8203;', str_split($value, 45));
  }
  elseif ($formatnumeric && is_numeric($value)) {
    if ($value > 1048576) {
      $value = round($value / 1048576, 1) . 'M';
    }
    elseif (is_float($value)) {
      $value = round($value, 1);
    }
  }

  return $value;
}

/**
 * Output HTML content of HHVM phpinfo.
 *
 * @param array $params
 *   List of HTTP GET parameters for HHVM phpinfo.
 */
function _hhvminfo_phpinfo_details(array $params) {
  if (empty($params) || count($params) >= 4 || isset($params['SUMMARY'])) {
    if (($pidfile = ini_get('pid')) || ($pidfile = ini_get('hhvm.pid_file'))) {
      if ($pidfile && is_readable($pidfile) && ($mtime = filemtime($pidfile))) {
        $uptime = new DateTime('@' . $mtime);
        $uptime = $uptime
          ->diff(new DateTime('NOW'))
          ->format('%a days, %h hours, %i minutes');
      }
      else {
        $uptime = '<i>unknown<i>';
      }

      if (function_exists('php_ini_loaded_file')) {
        $inifile = php_ini_loaded_file();
      }
      else {
        $inifile = '';
      }

      if (empty($inifile)) {
        $pid = is_readable($pidfile) ? file_get_contents($pidfile) : NULL;
        if (!empty($pid)) {
          $cmdfile = "/proc/{$pid}/cmdline";
          $cmdline = is_readable($cmdfile) ? file_get_contents($cmdfile) : NULL;
          if (!empty($cmdline)) {
            $pattern = '@-?-c(onfig)?\s*([^ ]+?)($|\s|--)@';
            if (preg_match($pattern, $cmdline, $match)) {
              $inifile = $match[2];
            }
          }
        }
      }
    }
    else {
      $uptime = $inifile = '<i>unknown</i>';
    }

    $host = function_exists('gethostname') ? gethostname() : php_uname('n');
    $sapi = php_sapi_name() . ' ' . ini_get('hhvm.server.type');
    _hhvminfo_print_table(
      array(
        'Host'                      => $host,
        'System'                    => php_uname(),
        'PHP Version'               => phpversion(),
        'HHVM Version'              => ini_get('hphp.compiler_version'),
        'HHVM compiler id'          => ini_get('hphp.compiler_id'),
        'SAPI'                      => $sapi,
        'Loaded Configuration File' => $inifile,
        'Uptime'                    => $uptime,
      )
    );
  }

  if (isset($params['INI']) && $ini = ini_get_all()) {
    ksort($ini);
    echo '<h2 id="ini">ini</h2>';
    _hhvminfo_print_table(
      $ini,
      array('Directive', 'Local Value', 'Master Value', 'Access'),
      FALSE
    );
    echo '<h2>access level legend</h2>';
    _hhvminfo_print_table(
      array(
        'Entry can be set in user scripts, ini_set()' => INI_USER,
        'Entry can be set in php.ini, .htaccess, httpd.conf' => INI_PERDIR,
        'Entry can be set in php.ini or httpd.conf' => INI_SYSTEM,
        '<div style="width:865px">Entry can be set anywhere</div>' => INI_ALL,
      )
    );
  }

  if (isset($params['EXTENSIONS'])
    && $extensions = get_loaded_extensions(TRUE)) {
    echo '<h2 id="extensions">extensions</h2>';
    natcasesort($extensions);
    _hhvminfo_print_table($extensions, array(), TRUE);
  }

  if (isset($params['FUNCTIONS']) && $functions = get_defined_functions()) {
    echo '<h2 id="functions">functions</h2>';
    natcasesort($functions['internal']);
    _hhvminfo_print_table($functions['internal'], array(), TRUE);
  }

  if (isset($params['CONSTANTS']) && $constants = get_defined_constants(TRUE)) {
    ksort($constants);
    foreach ($constants as $key => $value) {
      if (!empty($value)) {
        ksort($value);
        echo '<h2 id="constants-', $key, '">Constants (', $key, ')</h2>';
        _hhvminfo_print_table($value);
      }
    }
  }
}
